//BASE EM CALC
@function em($px, $base: $base-font) {
  @return ($px / $base) * 1em;
}

@function rem($size) {
  $rem-size: $size / 16px;
  @return $rem-size * 1rem;
}

// Slightly lighten a color
// @access public
// @param {Color} $color - color to tint
// @param {Number} $percentage - percentage of `$color` in returned color
// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Slightly darken a color
// @access public
// @param {Color} $color - color to shade
// @param {Number} $percentage - percentage of `$color` in returned color
// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// Object fit polyfill
@mixin object-fit($fit: fill, $position: null) {
  -o-object-fit: $fit;
  object-fit: $fit;

  @if $position {
    -o-object-position: $position;
    font-family: 'object-fit: #{$fit}; object-position: #{$position}';
    object-position: $position;
  } @else {
    font-family: 'object-fit: #{$fit}';
  }
}

// Map Get Deep
// Given a map and a list of keys, find the value at the given key
@function map-get-deep($map, $keys...) {
  @if length($keys) == 1 {
    $keys: nth($keys, 1);
  }
  $warn: '#{nth($keys, 1)}';
  $length: length($keys);
  $get: map-get($map, nth($keys, 1));

  @if $length > 1 {
    @for $i from 2 through $length {
      @if $get != null and type-of($get) == 'map' {
        $warn: $warn + '->#{nth($keys, $i)}';
        $get: map-get($get, nth($keys, $i));

        @if $get == null {
          @return map-get-deep-warning($warn, $get, nth($keys, $i));
        }
      } @else {
        @return map-get-deep-warning($warn, $get, nth($keys, $i));
      }
    }
  }

  @return $get;
}

// Instead of calling the individual color variable we can use the color Helper to pull from the color palette define in the colours css?
@function color($keys...) {
  $value: map-get-deep($colors, $keys);
  @return $value;
}

// standardise padding based on spacers
@function gutter($multiplier: 1, $size: small) {
  // $pixels: 
  @return map-get($spacers, $size) * $multiplier;
}

//calc ratio height
@mixin aspect-y-ratio($width, $height) {
  height: ($width / $height) * 100%;
}
